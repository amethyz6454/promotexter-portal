// SCSS File
// functions.scss

@use "sass:math";
@use "sass:color";
@use "sass:map";
@use "sass:list";

@mixin assert-ascending($map, $map-name) {
    $prev-key: null;
    $prev-num: null;

    @each $key, $num in $map {
        @if $prev-num == null or math.unit($num) == "%" {
        } @else if not math.compatible($prev-num, $num) {
            @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
        } @else if $prev-num >= $num {
            @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
        }

        $prev-key: $key;
        $prev-num: $num;
    }
}

@mixin assert-starts-at-zero($map, $map-name: "$grid-breakpoints") {
    $values: map.values($map);
    $first-value: list.nth($values, 1);

    @if $first-value != 0 {
        @warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
    }
}

@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace +
            str-replace(
                str-slice($string, $index + str-length($search)),
                $search,
                $replace
            );
    }

    @return $string;
}

@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {
    $r: color.red($color);
    $g: color.green($color);
    $b: color.blue($color);

    $yiq: (($r * 299) + ($g * 587) + ($b * 114)) * 0.001;

    @if ($yiq >= $yiq-contrasted-threshold) {
        @return $dark;
    } @else {
        @return $light;
    }
}

@function color($key: "blue") {
    @return map-get($colors, $key);
}

@function theme-color($key: "primary") {
    @return map-get($theme-colors, $key);
}

@function theme-color-alert($key: "primary") {
    @return map-get($theme-colors, $key);
}

@function gray($key: "100") {
    @return map-get($grays, $key);
}

@function theme-color-level($color-name: "primary", $level: 0) {
    $color: theme-color-alert($color-name);
    $color-base: if($level > 0, $black, $white);
    $level: abs($level);

    @return mix($color-base, $color, $level * $theme-color-interval);
}

@function hexToHSL($hex) {
    @return math.floor(color.channel($hex, "hue", $space: hsl)),
        math.floor(color.channel($hex, "saturation", $space: hsl)),
        math.floor(color.channel($hex, "lightness", $space: hsl));
}

@function hexToHSLDarken($hex, $darken: 10) {
    $lightness: color.channel($hex, "lightness", $space: hsl) - $darken;

    @if ($lightness <= 0%) {
        $lightness: 0%;
    }

    @return math.floor(color.channel($hex, "hue", $space: hsl)),
        math.floor(color.channel($hex, "saturation", $space: hsl)),
        math.floor($lightness);
}

@function hexToHSLLighten($hex, $lighten: 10) {
    $lightness: color.channel($hex, "lightness", $space: hsl) + $lighten;

    @if ($lightness >= 100%) {
        $lightness: 100%;
    }

    @return math.floor(color.channel($hex, "hue", $space: hsl)),
        math.floor(color.channel($hex, "saturation", $space: hsl)),
        math.floor($lightness);
}
